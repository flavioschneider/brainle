# @package _global_
type: model

# Larger num_embedding

model:
  _target_: brainle.models.sm_model.SMModel
  learning_rate: 0.01
  model:
    _target_: brainle.models.architectures.attention.SMUNet
    vocabulary_size: 837
    embedding_dim: 1024
    num_layers: 6
    memory_sizes: [512, 512, 1024, 1024, 2048, 4096]
    num_heads: 8
    kernel_size: 4
    stride: 2
    padding: 1
    use_skip: True

datamodule:
  _target_: brainle.datamodules.wikitext_datamodule.WikiTextDatamodule
  train_val_split: [9_892_399, 1_000_000]
  batch_size: 16
  num_workers: 0
  block_size: 512
  p_word_mask: 0.15
  p_char_mask: 0.05

callbacks:
  model_checkpoint:
    _target_: pytorch_lightning.callbacks.ModelCheckpoint
    monitor: "valid_loss"   # name of the logged metric which determines when model is improving
    save_top_k: 1           # save k best models (determined by above metric)
    save_last: True         # additionaly always save model from last epoch
    mode: "min"             # can be "max" or "min"
    verbose: False
    dirpath: ${logs_dir}/ckpts/${now:%Y-%m-%d-%H-%M-%S}
    filename: '{epoch:02d}-{valid_loss:.3f}'

  text_logger:
    _target_: brainle.callbacks.sm_callback.TextLogger
    batch_frequency: 10

loggers:
  wandb:
    _target_: pytorch_lightning.loggers.wandb.WandbLogger
    project: ${oc.env:WANDB_PROJECT}
    entity: ${oc.env:WANDB_ENTITY}
    # offline: False  # set True to store all logs only locally
    job_type: "train"
    group: ""
    save_dir: ${logs_dir}

trainer:
  _target_: pytorch_lightning.Trainer
  gpus: 0 # Set `1` to train on GPU, `0` to train on CPU only, and `-1` to train on all GPUs, default `0`
  log_gpu_memory: all # Logs memory of GPUs, default `None`
  precision: 32 # Precision used for tensors, default `32`
  accelerator: null # `ddp` GPUs train individually and sync gradients, default `None`
  min_epochs: 1
  max_epochs: 100_000
  weights_summary: top # Prints a summary of the model weights, default `top`
  log_every_n_steps: 1 # Logs metrics every N batches
